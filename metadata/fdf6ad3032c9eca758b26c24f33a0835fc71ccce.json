{"title":"D programming pack for windows - kbzombie","uid":7780154,"size":16492227,"categoryP":"applications","categoryS":"windows","magnet":"?xt=urn:btih:fdf6ad3032c9eca758b26c24f33a0835fc71ccce&amp;dn=D+programming+pack+for+windows+-+kbzombie&amp;tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80&amp;tr=udp%3A%2F%2Fopen.demonii.com%3A1337&amp;tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969&amp;tr=udp%3A%2F%2Fexodus.desync.com%3A6969","seeders":0,"leechers":1,"uploader":"kbzombie","files":9,"time":1351759980,"description":"What is D?\nD is a general purpose systems and applications programming language. It is a high level language, but retains the ability to write high performance code and interface directly with the operating system API's and with hardware. D is well suited to writing medium to large scale million line programs with teams of developers. D is easy to learn, provides many capabilities to aid the programmer, and is well suited to aggressive compiler optimization technology. \nD is not a scripting language, nor an interpreted language. It doesn't come with a VM, a religion, or an overriding philosophy. It's a practical language for practical programmers who need to get the job done quickly, reliably, and leave behind maintainable, easy to understand code. \nD is the culmination of decades of experience implementing compilers for many diverse languages, and attempting to construct large projects using those languages. D draws inspiration from those other languages (most especially C++) and tempers it with experience and real world practicality.\n\nWhy D?\nWhy, indeed. Who needs another programming language? \nThe software industry has come a long way since the C language was invented. Many new concepts were added to the language with C++, but backwards compatibility with C was maintained, including compatibility with nearly all the weaknesses of the original design. There have been many attempts to fix those weaknesses, but the compatibility issue frustrates it. Meanwhile, both C and C++ undergo a constant accretion of new features. These new features must be carefully fitted into the existing structure without requiring rewriting old code. The end result is very complicated - the C standard is nearly 500 pages, and the C++ standard is about 750 pages! C++ is a difficult and costly language to implement, resulting in implementation variations that make it frustrating to write fully portable C++ code. \nC++ implements things like resizable arrays and string concatenation as part of the standard library, not as part of the core language. \nCan the power and capability of C++ be extracted, redesigned, and recast into a language that is simple, orthogonal, and practical? Can it all be put into a package that is easy for compiler writers to correctly implement, and which enables compilers to efficiently generate aggressively optimized code? \nModern compiler technology has progressed to the point where language features for the purpose of compensating for primitive compiler technology can be omitted. (An example of this would be the Ã¢â‚¬ËœregisterÃ¢â‚¬â„¢ keyword in C, a more subtle example is the macro preprocessor in C.) We can rely on modern compiler optimization technology to not need language features necessary to get acceptable code quality out of primitive compilers. ","torrent":{"xt":"urn:btih:fdf6ad3032c9eca758b26c24f33a0835fc71ccce","amp;dn":"D+programming+pack+for+windows+-+kbzombie","amp;tr":["udp%3A%2F%2Ftracker.openbittorrent.com%3A80","udp%3A%2F%2Fopen.demonii.com%3A1337","udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969","udp%3A%2F%2Fexodus.desync.com%3A6969"],"infoHash":"fdf6ad3032c9eca758b26c24f33a0835fc71ccce","infoHashBuffer":{"type":"Buffer","data":[253,246,173,48,50,201,236,167,88,178,108,36,243,58,8,53,252,113,204,206]},"announce":[],"urlList":[]}}